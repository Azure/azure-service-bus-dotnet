[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"Microsoft.Azure.ServiceBus.UnitTests,PublicKey=0024000004800000940000000602000000240000525341310004000001000100fdf4acac3b2244dd8a96737e5385b31414369dc3e42f371172127252856a0650793e1f5673a16d5d78e2ac852a104bc51e6f018dca44fdd26a219c27cb2b263956a80620223c8e9c2f8913c3c903e1e453e9e4e84098afdad5f4badb8c1ebe0a7b0a4b57a08454646a65886afe3e290a791ff3260099ce0edf0bdbccafadfeb6")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Runtime.InteropServices.GuidAttribute("a042adf0-ef65-4f87-b634-322a409f3d61")]
[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.5.1", FrameworkDisplayName=".NET Framework 4.5.1")]

namespace Microsoft.Azure.ServiceBus
{
    
    public abstract class ClientEntity : Microsoft.Azure.ServiceBus.IClientEntity
    {
        protected ClientEntity(string clientId, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy) { }
        public string ClientId { get; }
        public bool IsClosedOrClosing { get; }
        public System.TimeSpan OperationTimeout { get; }
        public abstract System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public Microsoft.Azure.ServiceBus.RetryPolicy RetryPolicy { get; }
        public System.Threading.Tasks.Task CloseAsync() { }
        protected static long GetNextId() { }
        protected abstract System.Threading.Tasks.Task OnClosingAsync();
        public abstract void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin);
        public abstract void UnregisterPlugin(string serviceBusPluginName);
    }
    public class static EntityNameHelper
    {
        public static string FormatDeadLetterPath(string entityPath) { }
        public static string FormatSubQueuePath(string entityPath, string subQueueName) { }
        public static string FormatSubscriptionPath(string topicPath, string subscriptionName) { }
        public static string FormatTransferDeadLetterPath(string entityPath) { }
    }
    public class static ExceptionReceivedEventArgsAction
    {
        public const string Abandon = "Abandon";
        public const string AcceptMessageSession = "AcceptMessageSession";
        public const string CloseMessageSession = "CloseMessageSession";
        public const string Complete = "Complete";
        public const string Receive = "Receive";
        public const string RenewLock = "RenewLock";
        public const string UserCallback = "UserCallback";
    }
    public interface IClientEntity
    {
        string ClientId { get; }
        bool IsClosedOrClosing { get; }
        System.TimeSpan OperationTimeout { get; }
        System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        System.Threading.Tasks.Task CloseAsync();
        void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin);
        void UnregisterPlugin(string serviceBusPluginName);
    }
    public interface IMessageSession : Microsoft.Azure.ServiceBus.Core.IMessageReceiver, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        System.DateTime LockedUntilUtc { get; }
        string SessionId { get; }
        System.Threading.Tasks.Task<System.IO.Stream> GetStateAsync();
        System.Threading.Tasks.Task RenewSessionLockAsync();
        System.Threading.Tasks.Task SetStateAsync(System.IO.Stream sessionState);
    }
    public interface IQueueClient : Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        string QueueName { get; }
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler);
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions);
    }
    public interface ISubscriptionClient : Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        string SubscriptionName { get; }
        string TopicPath { get; }
        System.Threading.Tasks.Task AddRuleAsync(string ruleName, Microsoft.Azure.ServiceBus.Filters.Filter filter);
        System.Threading.Tasks.Task AddRuleAsync(Microsoft.Azure.ServiceBus.Filters.RuleDescription description);
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler);
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions);
        System.Threading.Tasks.Task RemoveRuleAsync(string ruleName);
    }
    public interface ITopicClient : Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        string TopicName { get; }
    }
    public class Message
    {
        public Message() { }
        public Message(byte[] body) { }
        public byte[] Body { get; set; }
        public string ContentType { get; set; }
        public string CorrelationId { get; set; }
        public System.DateTime ExpiresAtUtc { get; }
        public string Label { get; set; }
        public string MessageId { get; set; }
        public string PartitionKey { get; set; }
        public string ReplyTo { get; set; }
        public string ReplyToSessionId { get; set; }
        public System.DateTime ScheduledEnqueueTimeUtc { get; set; }
        public string SessionId { get; set; }
        public long Size { get; }
        public Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection SystemProperties { get; }
        public System.TimeSpan TimeToLive { get; set; }
        public string To { get; set; }
        public System.Collections.Generic.IDictionary<string, object> UserProperties { get; }
        public string ViaPartitionKey { get; set; }
        public Microsoft.Azure.ServiceBus.Message Clone() { }
        public override string ToString() { }
        public sealed class SystemPropertiesCollection
        {
            public SystemPropertiesCollection() { }
            public string DeadLetterSource { get; }
            public int DeliveryCount { get; }
            public long EnqueuedSequenceNumber { get; }
            public System.DateTime EnqueuedTimeUtc { get; }
            public bool IsLockTokenSet { get; }
            public bool IsReceived { get; }
            public System.DateTime LockedUntilUtc { get; }
            public string LockToken { get; }
            public long SequenceNumber { get; }
        }
    }
    public sealed class MessageHandlerOptions
    {
        public MessageHandlerOptions(System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public bool AutoComplete { get; set; }
        public System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> ExceptionReceivedHandler { get; set; }
        public System.TimeSpan MaxAutoRenewDuration { get; set; }
        public int MaxConcurrentCalls { get; set; }
    }
    public sealed class MessageLockLostException : Microsoft.Azure.ServiceBus.ServiceBusException { }
    public sealed class MessagingEntityDisabledException : Microsoft.Azure.ServiceBus.ServiceBusException { }
    public sealed class MessagingEntityNotFoundException : Microsoft.Azure.ServiceBus.ServiceBusException { }
    public sealed class NoRetry : Microsoft.Azure.ServiceBus.RetryPolicy
    {
        public NoRetry() { }
        protected override bool OnShouldRetry(System.TimeSpan remainingTime, int currentRetryCount, out System.TimeSpan retryInterval) { }
    }
    public class QueueClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity, Microsoft.Azure.ServiceBus.IQueueClient
    {
        public QueueClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public QueueClient(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public string Path { get; }
        public int PrefetchCount { get; set; }
        public string QueueName { get; }
        public Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public System.Threading.Tasks.Task AbandonAsync(string lockToken) { }
        public System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber) { }
        public System.Threading.Tasks.Task CompleteAsync(string lockToken) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions) { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions) { }
        public System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc) { }
        public System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message) { }
        public System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public sealed class QuotaExceededException : Microsoft.Azure.ServiceBus.ServiceBusException { }
    public enum ReceiveMode
    {
        PeekLock = 0,
        ReceiveAndDelete = 1,
    }
    public sealed class RetryExponential : Microsoft.Azure.ServiceBus.RetryPolicy
    {
        public RetryExponential(System.TimeSpan minimumBackoff, System.TimeSpan maximumBackoff, int maximumRetryCount) { }
        public System.TimeSpan DeltaBackoff { get; }
        public System.TimeSpan MaximumBackoff { get; }
        public int MaxRetryCount { get; }
        public System.TimeSpan MinimalBackoff { get; }
        protected override bool OnShouldRetry(System.TimeSpan remainingTime, int currentRetryCount, out System.TimeSpan retryInterval) { }
    }
    public abstract class RetryPolicy
    {
        protected RetryPolicy() { }
        public static Microsoft.Azure.ServiceBus.RetryPolicy Default { get; }
        public bool IsServerBusy { get; set; }
        public string ServerBusyExceptionMessage { get; set; }
        public virtual bool IsRetryableException(System.Exception exception) { }
        protected abstract bool OnShouldRetry(System.TimeSpan remainingTime, int currentRetryCount, out System.TimeSpan retryInterval);
        public System.Threading.Tasks.Task RunOperation(System.Func<System.Threading.Tasks.Task> operation, System.TimeSpan operationTimeout) { }
    }
    public class SecurityToken
    {
        public SecurityToken(string tokenString, System.DateTime expiresAtUtc, string audience) { }
        public SecurityToken(string tokenString, System.DateTime expiresAtUtc) { }
        public SecurityToken(string tokenString) { }
        public string Audience { get; }
        protected virtual string AudienceFieldName { get; }
        public System.DateTime ExpiresAtUtc { get; }
        protected virtual string ExpiresOnFieldName { get; }
        protected virtual string KeyValueSeparator { get; }
        protected virtual string PairSeparator { get; }
        public object TokenValue { get; }
    }
    public sealed class ServerBusyException : Microsoft.Azure.ServiceBus.ServiceBusException { }
    public class ServiceBusCommunicationException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        protected internal ServiceBusCommunicationException(string message) { }
        protected internal ServiceBusCommunicationException(string message, System.Exception innerException) { }
    }
    public class ServiceBusConnectionStringBuilder
    {
        public ServiceBusConnectionStringBuilder() { }
        public ServiceBusConnectionStringBuilder(string connectionString) { }
        public ServiceBusConnectionStringBuilder(string endpoint, string entityPath, string sharedAccessKeyName, string sharedAccessKey) { }
        public string Endpoint { get; set; }
        public string EntityPath { get; set; }
        public string SasKey { get; set; }
        public string SasKeyName { get; set; }
        public string GetEntityConnectionString() { }
        public string GetNamespaceConnectionString() { }
        public override string ToString() { }
    }
    public class ServiceBusException : System.Exception
    {
        public ServiceBusException(bool isTransient) { }
        public ServiceBusException(bool isTransient, string message) { }
        public ServiceBusException(bool isTransient, System.Exception innerException) { }
        public ServiceBusException(bool isTransient, string message, System.Exception innerException) { }
        public new bool IsTransient { get; }
        public override string Message { get; }
        public string ServiceBusNamespace { get; }
    }
    public sealed class SessionClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.ISessionClient
    {
        public SessionClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public SessionClient(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public string EntityPath { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync() { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(System.TimeSpan serverWaitTime) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId, System.TimeSpan serverWaitTime) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public sealed class SessionHandlerOptions
    {
        public SessionHandlerOptions(System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public bool AutoComplete { get; set; }
        public System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> ExceptionReceivedHandler { get; set; }
        public System.TimeSpan MaxAutoRenewDuration { get; set; }
        public int MaxConcurrentSessions { get; set; }
        public System.TimeSpan MessageWaitTimeout { get; set; }
    }
    public sealed class SessionLockLostException : Microsoft.Azure.ServiceBus.ServiceBusException { }
    public class SharedAccessSignatureTokenProvider : Microsoft.Azure.ServiceBus.TokenProvider
    {
        public static readonly System.DateTime EpochTime;
        protected SharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, System.Func<string, byte[]> customKeyEncoder, System.TimeSpan tokenTimeToLive, Microsoft.Azure.ServiceBus.TokenScope tokenScope) { }
        protected virtual string BuildSignature(string targetUri) { }
        protected override System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.SecurityToken> OnGetTokenAsync(string appliesTo, string action, System.TimeSpan timeout) { }
    }
    public class SubscriptionClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity, Microsoft.Azure.ServiceBus.ISubscriptionClient
    {
        public SubscriptionClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, string subscriptionName, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public SubscriptionClient(string connectionString, string topicPath, string subscriptionName, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public string Path { get; }
        public int PrefetchCount { get; set; }
        public Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public string SubscriptionName { get; }
        public string TopicPath { get; }
        public System.Threading.Tasks.Task AbandonAsync(string lockToken) { }
        public System.Threading.Tasks.Task AddRuleAsync(string ruleName, Microsoft.Azure.ServiceBus.Filters.Filter filter) { }
        public System.Threading.Tasks.Task AddRuleAsync(Microsoft.Azure.ServiceBus.Filters.RuleDescription description) { }
        public System.Threading.Tasks.Task CompleteAsync(string lockToken) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions) { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions) { }
        public System.Threading.Tasks.Task RemoveRuleAsync(string ruleName) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public abstract class TokenProvider
    {
        protected TokenProvider() { }
        protected TokenProvider(Microsoft.Azure.ServiceBus.TokenScope tokenScope) { }
        protected object ThisLock { get; }
        public Microsoft.Azure.ServiceBus.TokenScope TokenScope { get; }
        public static Microsoft.Azure.ServiceBus.TokenProvider CreateSharedAccessSignatureTokenProvider(string sharedAccessSignature) { }
        public static Microsoft.Azure.ServiceBus.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey) { }
        public static Microsoft.Azure.ServiceBus.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, System.TimeSpan tokenTimeToLive) { }
        public static Microsoft.Azure.ServiceBus.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, Microsoft.Azure.ServiceBus.TokenScope tokenScope) { }
        public static Microsoft.Azure.ServiceBus.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, System.TimeSpan tokenTimeToLive, Microsoft.Azure.ServiceBus.TokenScope tokenScope) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.SecurityToken> GetTokenAsync(string appliesTo, string action, System.TimeSpan timeout) { }
        protected virtual string NormalizeAppliesTo(string appliesTo) { }
        protected abstract System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.SecurityToken> OnGetTokenAsync(string appliesTo, string action, System.TimeSpan timeout);
    }
    public enum TokenScope
    {
        Namespace = 0,
        Entity = 1,
    }
    public class TopicClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity, Microsoft.Azure.ServiceBus.ITopicClient
    {
        public TopicClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public TopicClient(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public string Path { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public string TopicName { get; }
        public System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc) { }
        public System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message) { }
        public System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
}
namespace Microsoft.Azure.ServiceBus.Core
{
    
    public interface IMessageReceiver : Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        long LastPeekedSequenceNumber { get; }
        int PrefetchCount { get; set; }
        System.Threading.Tasks.Task CompleteAsync(System.Collections.Generic.IEnumerable<string> lockTokens);
        System.Threading.Tasks.Task DeferAsync(string lockToken);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekAsync();
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekAsync(int maxMessageCount);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekBySequenceNumberAsync(long fromSequenceNumber);
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekBySequenceNumberAsync(long fromSequenceNumber, int messageCount);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync();
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync(System.TimeSpan operationTimeout);
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount);
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount, System.TimeSpan operationTimeout);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveBySequenceNumberAsync(long sequenceNumber);
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveBySequenceNumberAsync(System.Collections.Generic.IEnumerable<long> sequenceNumbers);
        System.Threading.Tasks.Task<System.DateTime> RenewLockAsync(string lockToken);
    }
    public interface IMessageSender : Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity { }
    public interface IReceiverClient : Microsoft.Azure.ServiceBus.IClientEntity
    {
        string Path { get; }
        Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; }
        System.Threading.Tasks.Task AbandonAsync(string lockToken);
        System.Threading.Tasks.Task CompleteAsync(string lockToken);
        System.Threading.Tasks.Task DeadLetterAsync(string lockToken);
        void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler);
        void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions);
    }
    public interface ISenderClient : Microsoft.Azure.ServiceBus.IClientEntity
    {
        System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber);
        System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc);
        System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message);
        System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList);
    }
    public interface ISessionClient
    {
        string EntityPath { get; }
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync();
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(System.TimeSpan serverWaitTime);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId, System.TimeSpan serverWaitTime);
    }
    public class MessageReceiver : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IMessageReceiver, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        public MessageReceiver(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public MessageReceiver(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        protected MessageReceiver(Microsoft.Azure.ServiceBus.ReceiveMode receiveMode, System.TimeSpan operationTimeout, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy) { }
        public long LastPeekedSequenceNumber { get; }
        public System.DateTime LockedUntilUtc { get; set; }
        public string Path { get; }
        public int PrefetchCount { get; set; }
        public Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; set; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public string SessionId { get; set; }
        public System.Threading.Tasks.Task AbandonAsync(string lockToken) { }
        public System.Threading.Tasks.Task CompleteAsync(string lockToken) { }
        public System.Threading.Tasks.Task CompleteAsync(System.Collections.Generic.IEnumerable<string> lockTokens) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken) { }
        public System.Threading.Tasks.Task DeferAsync(string lockToken) { }
        protected virtual System.Threading.Tasks.Task OnAbandonAsync(string lockToken) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        protected virtual System.Threading.Tasks.Task OnCompleteAsync(System.Collections.Generic.IEnumerable<string> lockTokens) { }
        protected virtual System.Threading.Tasks.Task OnDeadLetterAsync(string lockToken) { }
        protected virtual System.Threading.Tasks.Task OnDeferAsync(string lockToken) { }
        protected virtual void OnMessageHandler(Microsoft.Azure.ServiceBus.MessageHandlerOptions registerHandlerOptions, System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> OnPeekAsync(long fromSequenceNumber, int messageCount = 1) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> OnReceiveAsync(int maxMessageCount, System.TimeSpan serverWaitTime) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> OnReceiveBySequenceNumberAsync(System.Collections.Generic.IEnumerable<long> sequenceNumbers) { }
        protected virtual System.Threading.Tasks.Task<System.DateTime> OnRenewLockAsync(string lockToken) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekAsync() { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekAsync(int maxMessageCount) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekBySequenceNumberAsync(long fromSequenceNumber) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekBySequenceNumberAsync(long fromSequenceNumber, int messageCount) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync() { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync(System.TimeSpan operationTimeout) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount, System.TimeSpan operationTimeout) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveBySequenceNumberAsync(long sequenceNumber) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveBySequenceNumberAsync(System.Collections.Generic.IEnumerable<long> sequenceNumbers) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions) { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public System.Threading.Tasks.Task<System.DateTime> RenewLockAsync(string lockToken) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public class MessageSender : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IMessageSender, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        public MessageSender(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public MessageSender(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public string Path { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc) { }
        public System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message) { }
        public System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public abstract class ServiceBusPlugin
    {
        protected ServiceBusPlugin() { }
        public abstract string Name { get; }
        public virtual bool ShouldContinueOnException { get; }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> AfterMessageReceive(Microsoft.Azure.ServiceBus.Message message) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> BeforeMessageSend(Microsoft.Azure.ServiceBus.Message message) { }
    }
}
namespace Microsoft.Azure.ServiceBus.Filters
{
    
    public sealed class CorrelationFilter : Microsoft.Azure.ServiceBus.Filters.Filter
    {
        public CorrelationFilter() { }
        public CorrelationFilter(string correlationId) { }
        public string ContentType { get; set; }
        public string CorrelationId { get; set; }
        public string Label { get; set; }
        public string MessageId { get; set; }
        public System.Collections.Generic.IDictionary<string, object> Properties { get; }
        public string ReplyTo { get; set; }
        public string ReplyToSessionId { get; set; }
        public string SessionId { get; set; }
        public string To { get; set; }
        public override string ToString() { }
    }
    public sealed class FalseFilter : Microsoft.Azure.ServiceBus.Filters.SqlFilter
    {
        public FalseFilter() { }
        public override string ToString() { }
    }
    public abstract class Filter { }
    public abstract class RuleAction { }
    public sealed class RuleDescription
    {
        public const string DefaultRuleName = "$Default";
        public RuleDescription() { }
        public RuleDescription(string name) { }
        public RuleDescription(Microsoft.Azure.ServiceBus.Filters.Filter filter) { }
        public RuleDescription(string name, Microsoft.Azure.ServiceBus.Filters.Filter filter) { }
        public Microsoft.Azure.ServiceBus.Filters.RuleAction Action { get; set; }
        public Microsoft.Azure.ServiceBus.Filters.Filter Filter { get; set; }
        public string Name { get; set; }
    }
    public class SqlFilter : Microsoft.Azure.ServiceBus.Filters.Filter
    {
        public SqlFilter(string sqlExpression) { }
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; }
        public string SqlExpression { get; }
        public override string ToString() { }
    }
    public sealed class SqlRuleAction : Microsoft.Azure.ServiceBus.Filters.RuleAction
    {
        public SqlRuleAction(string sqlExpression) { }
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; }
        public string SqlExpression { get; }
        public override string ToString() { }
    }
    public sealed class TrueFilter : Microsoft.Azure.ServiceBus.Filters.SqlFilter
    {
        public TrueFilter() { }
        public override string ToString() { }
    }
}
namespace Microsoft.Azure.ServiceBus.Primitives
{
    
    public class ExceptionReceivedContext
    {
        public ExceptionReceivedContext(string action, string endpoint, string entityPath, string clientId) { }
        public string Action { get; }
        public string ClientId { get; }
        public string Endpoint { get; }
        public string EntityPath { get; }
    }
    public sealed class ExceptionReceivedEventArgs : System.EventArgs
    {
        public ExceptionReceivedEventArgs(System.Exception exception, string action, string endpoint, string entityName, string clientId) { }
        public System.Exception Exception { get; }
        public Microsoft.Azure.ServiceBus.Primitives.ExceptionReceivedContext ExceptionReceivedContext { get; }
    }
    public class ServiceBusTimeoutException : Microsoft.Azure.ServiceBus.ServiceBusException { }
}